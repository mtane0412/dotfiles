(function() {
  var Beautifiers, EventEmitter, Languages, Promise, allowUnsafeEval, editorconfig, extend, fs, logger, path, pkg, strip, trackingId, ua, version, yaml, _, _plus,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('lodash');

  _plus = require('underscore-plus');

  Promise = require('bluebird');

  Languages = require('../languages/');

  path = require('path');

  logger = require('../logger')(__filename);

  EventEmitter = require('events').EventEmitter;

  extend = null;

  ua = null;

  fs = null;

  strip = null;

  yaml = null;

  editorconfig = null;

  allowUnsafeEval = require('loophole').allowUnsafeEval;

  allowUnsafeEval(function() {
    return ua = require("universal-analytics");
  });

  pkg = require("../../package.json");

  version = pkg.version;

  trackingId = "UA-52729731-2";


  /*
  Register all supported beautifiers
   */

  module.exports = Beautifiers = (function(_super) {
    __extends(Beautifiers, _super);


    /*
      List of beautifier names
    
      To register a beautifier add its name here
     */

    Beautifiers.prototype.beautifierNames = ['uncrustify', 'autopep8', 'coffee-formatter', 'coffee-fmt', 'cljfmt', 'clang-format', 'crystal', 'dfmt', 'elm-format', 'hh_format', 'htmlbeautifier', 'csscomb', 'gherkin', 'gofmt', 'latex-beautify', 'fortran-beautifier', 'js-beautify', 'jscs', 'lua-beautifier', 'ocp-indent', 'perltidy', 'php-cs-fixer', 'phpcbf', 'prettydiff', 'pug-beautify', 'puppet-fix', 'remark', 'rubocop', 'ruby-beautify', 'rustfmt', 'sass-convert', 'sqlformat', 'stylish-haskell', 'tidy-markdown', 'typescript-formatter', 'vue-beautifier', 'yapf', 'erl_tidy', 'marko-beautifier', 'formatR', 'beautysh'];


    /*
      List of loaded beautifiers
    
      Autogenerated in `constructor` from `beautifierNames`
     */

    Beautifiers.prototype.beautifiers = null;


    /*
      All beautifier options
    
      Autogenerated in `constructor`
     */

    Beautifiers.prototype.options = null;


    /*
      Languages
     */

    Beautifiers.prototype.languages = new Languages();


    /*
      Constructor
     */

    function Beautifiers() {
      this.getOptions = __bind(this.getOptions, this);
      this.beautifiers = _.map(this.beautifierNames, function(name) {
        var Beautifier;
        Beautifier = require("./" + name);
        return new Beautifier();
      });
      try {
        this.options = require('../options.json');
      } catch (_error) {
        console.warn('Beautifier options not found.');
        this.options = {};
      }
    }


    /*
      From https://github.com/atom/notifications/blob/01779ade79e7196f1603b8c1fa31716aa4a33911/lib/notification-issue.coffee#L130
     */

    Beautifiers.prototype.encodeURI = function(str) {
      str = encodeURI(str);
      return str.replace(/#/g, '%23').replace(/;/g, '%3B');
    };

    Beautifiers.prototype.getBeautifiers = function(language) {
      return _.filter(this.beautifiers, function(beautifier) {
        return _.includes(beautifier.languages, language);
      });
    };

    Beautifiers.prototype.getBeautifierForLanguage = function(language) {
      var beautifier, beautifiers, preferredBeautifierName;
      beautifiers = this.getBeautifiers(language.name);
      logger.verbose('beautifiers', _.map(beautifiers, 'name'));
      preferredBeautifierName = atom.config.get("atom-beautify." + language.namespace + ".default_beautifier");
      beautifier = _.find(beautifiers, function(beautifier) {
        return beautifier.name === preferredBeautifierName;
      }) || beautifiers[0];
      return beautifier;
    };

    Beautifiers.prototype.getLanguage = function(grammar, filePath) {
      var fileExtension, language, languages;
      fileExtension = path.extname(filePath);
      fileExtension = fileExtension.substr(1);
      languages = this.languages.getLanguages({
        grammar: grammar,
        extension: fileExtension
      });
      logger.verbose(languages, grammar, fileExtension);
      if (languages.length < 1) {
        return null;
      } else {
        return language = languages[0];
      }
    };

    Beautifiers.prototype.getOptionsForLanguage = function(allOptions, language) {
      var options, selections;
      selections = (language.fallback || []).concat([language.namespace]);
      return options = this.getOptions(selections, allOptions) || {};
    };

    Beautifiers.prototype.transformOptions = function(beautifier, languageName, options) {
      var beautifierOptions, field, fields, fn, op, transformedOptions, vals, _i;
      beautifierOptions = beautifier.options[languageName];
      if (typeof beautifierOptions === "boolean") {
        return options;
      } else if (typeof beautifierOptions === "object") {
        transformedOptions = {};
        for (field in beautifierOptions) {
          op = beautifierOptions[field];
          if (typeof op === "string") {
            transformedOptions[field] = options[op];
          } else if (typeof op === "function") {
            transformedOptions[field] = op(options[field]);
          } else if (typeof op === "boolean") {
            if (op === true) {
              transformedOptions[field] = options[field];
            }
          } else if (_.isArray(op)) {
            fields = 2 <= op.length ? __slice.call(op, 0, _i = op.length - 1) : (_i = 0, []), fn = op[_i++];
            vals = _.map(fields, function(f) {
              return options[f];
            });
            transformedOptions[field] = fn.apply(null, vals);
          }
        }
        return transformedOptions;
      } else {
        logger.warn("Unsupported Language options: ", beautifierOptions);
        return options;
      }
    };

    Beautifiers.prototype.trackEvent = function(payload) {
      return this.track("event", payload);
    };

    Beautifiers.prototype.trackTiming = function(payload) {
      return this.track("timing", payload);
    };

    Beautifiers.prototype.track = function(type, payload) {
      var error, userId, uuid;
      try {
        if (atom.config.get("atom-beautify.general.analytics")) {
          if (!atom.config.get("atom-beautify.general._analyticsUserId")) {
            uuid = require("node-uuid");
            atom.config.set("atom-beautify.general._analyticsUserId", uuid.v4());
          }
          userId = atom.config.get("atom-beautify.general._analyticsUserId");
          if (this.analytics == null) {
            this.analytics = new ua(trackingId, userId, {
              headers: {
                "User-Agent": navigator.userAgent
              }
            });
          }
          return this.analytics[type](payload).send();
        }
      } catch (_error) {
        error = _error;
        return logger.error(error);
      }
    };

    Beautifiers.prototype.beautify = function(text, allOptions, grammar, filePath, _arg) {
      var onSave;
      onSave = (_arg != null ? _arg : {}).onSave;
      return Promise.all(allOptions).then((function(_this) {
        return function(allOptions) {
          return new Promise(function(resolve, reject) {
            var beautifier, beautifyOnSave, context, detail, fileExtension, langDisabled, language, languages, options, repoBugsUrl, startTime, title, unsupportedGrammar;
            logger.info('beautify', text, allOptions, grammar, filePath, onSave);
            logger.verbose(allOptions);
            fileExtension = path.extname(filePath);
            fileExtension = fileExtension.substr(1);
            languages = _this.languages.getLanguages({
              grammar: grammar,
              extension: fileExtension
            });
            logger.verbose(languages, grammar, fileExtension);
            if (languages.length < 1) {
              unsupportedGrammar = true;
              logger.verbose('Unsupported language');
              if (onSave) {
                return resolve(null);
              }
            } else {
              language = languages[0];
              logger.verbose("Language " + language.name + " supported");
              langDisabled = atom.config.get("atom-beautify." + language.namespace + ".disabled");
              unsupportedGrammar = false;
              if (langDisabled) {
                logger.verbose("Language " + language.name + " is disabled");
                return resolve(null);
              }
              beautifyOnSave = atom.config.get("atom-beautify." + language.namespace + ".beautify_on_save");
              if (onSave && !beautifyOnSave) {
                logger.verbose("Beautify on save is disabled for language " + language.name);
                return resolve(null);
              }
              options = _this.getOptionsForLanguage(allOptions, language);
              logger.verbose(grammar, language);
              logger.verbose("language options: " + (JSON.stringify(options, null, 4)));
              logger.verbose(language.name, filePath, options, allOptions);
              beautifier = _this.getBeautifierForLanguage(language);
              if (beautifier == null) {
                unsupportedGrammar = true;
                logger.verbose('Beautifier for language not found');
              } else {
                logger.verbose('beautifier', beautifier.name);
                options = _this.transformOptions(beautifier, language.name, options);
                _this.emit("beautify::start");
                context = {
                  filePath: filePath
                };
                startTime = new Date();
                beautifier.beautify(text, language.name, options, context).then(function(result) {
                  resolve(result);
                  _this.trackTiming({
                    utc: "Beautify",
                    utv: language != null ? language.name : void 0,
                    utt: new Date() - startTime,
                    utl: version
                  });
                  if (!result) {
                    return _this.trackEvent({
                      ec: version,
                      ea: "Beautify:Empty",
                      el: language != null ? language.name : void 0
                    });
                  }
                })["catch"](function(error) {
                  reject(error);
                  return _this.trackEvent({
                    ec: version,
                    ea: "Beautify:Error",
                    el: language != null ? language.name : void 0
                  });
                })["finally"](function() {
                  return _this.emit("beautify::end");
                });
              }
            }
            _this.trackEvent({
              ec: version,
              ea: "Beautify",
              el: language != null ? language.name : void 0
            });
            if (onSave) {
              _this.trackEvent({
                ec: version,
                ea: "Beautify:OnSave",
                el: language != null ? language.name : void 0
              });
            } else {
              _this.trackEvent({
                ec: version,
                ea: "Beautify:Manual",
                el: language != null ? language.name : void 0
              });
            }
            if (unsupportedGrammar) {
              if (atom.config.get("atom-beautify.general.muteUnsupportedLanguageErrors")) {
                return resolve(null);
              } else {
                repoBugsUrl = pkg.bugs.url;
                title = "Atom Beautify could not find a supported beautifier for this file";
                detail = "Atom Beautify could not determine a supported beautifier to handle this file with grammar \"" + grammar + "\" and extension \"" + fileExtension + "\". If you would like to request support for this file and its language, please create an issue for Atom Beautify at " + repoBugsUrl;
                if (typeof atom !== "undefined" && atom !== null) {
                  atom.notifications.addWarning(title, {
                    detail: detail,
                    dismissable: true
                  });
                }
                return resolve(null);
              }
            }
          });
        };
      })(this));
    };

    Beautifiers.prototype.findFileResults = {};

    Beautifiers.prototype.getUserHome = function() {
      return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
    };

    Beautifiers.prototype.verifyExists = function(fullPath) {
      if (fs == null) {
        fs = require("fs");
      }
      if (fs.existsSync(fullPath)) {
        return fullPath;
      } else {
        return null;
      }
    };


    /*
      Searches for a file with a specified name starting with
      'dir' and going all the way up either until it finds the file
      or hits the root.
    
      @param {string} name filename to search for (e.g. .jshintrc)
      @param {string} dir directory to start search from (default:
      current working directory)
      @param {boolean} upwards should recurse upwards on failure? (default: true)
    
      @returns {string} normalized filename
     */

    Beautifiers.prototype.findFile = function(name, dir, upwards) {
      var filename, parent;
      if (upwards == null) {
        upwards = true;
      }
      if (path == null) {
        path = require("path");
      }
      dir = dir || process.cwd();
      filename = path.normalize(path.join(dir, name));
      if (this.findFileResults[filename] !== void 0) {
        return this.findFileResults[filename];
      }
      parent = path.resolve(dir, "../");
      if (this.verifyExists(filename)) {
        this.findFileResults[filename] = filename;
        return filename;
      }
      if (dir === parent) {
        this.findFileResults[filename] = null;
        return null;
      }
      if (upwards) {
        return findFile(name, parent);
      } else {
        return null;
      }
    };


    /*
      Tries to find a configuration file in either project directory
      or in the home directory. Configuration files are named
      '.jsbeautifyrc'.
    
      @param {string} config name of the configuration file
      @param {string} file path to the file to be linted
      @param {boolean} upwards should recurse upwards on failure? (default: true)
    
      @returns {string} a path to the config file
     */

    Beautifiers.prototype.findConfig = function(config, file, upwards) {
      var dir, envs, home, proj;
      if (upwards == null) {
        upwards = true;
      }
      if (path == null) {
        path = require("path");
      }
      dir = path.dirname(path.resolve(file));
      envs = this.getUserHome();
      home = path.normalize(path.join(envs, config));
      proj = this.findFile(config, dir, upwards);
      logger.verbose(dir, proj, home);
      if (proj) {
        return proj;
      }
      if (this.verifyExists(home)) {
        return home;
      }
      return null;
    };

    Beautifiers.prototype.getConfigOptionsFromSettings = function(langs) {
      var config, options;
      config = atom.config.get('atom-beautify');
      return options = _.pick(config, langs);
    };

    Beautifiers.prototype.getConfig = function(startPath, upwards) {
      var configPath, contents, detail, e, error, externalOptions, jsonError, title;
      if (upwards == null) {
        upwards = true;
      }
      startPath = (typeof startPath === "string" ? startPath : "");
      if (!startPath) {
        return {};
      }
      configPath = this.findConfig(".jsbeautifyrc", startPath, upwards);
      logger.verbose('configPath', configPath, startPath, upwards);
      externalOptions = void 0;
      if (configPath) {
        if (fs == null) {
          fs = require("fs");
        }
        try {
          contents = fs.readFileSync(configPath, {
            encoding: "utf8"
          });
        } catch (_error) {
          error = _error;
          contents = null;
        }
        if (!contents) {
          externalOptions = {};
        } else {
          try {
            if (strip == null) {
              strip = require("strip-json-comments");
            }
            externalOptions = JSON.parse(strip(contents));
          } catch (_error) {
            e = _error;
            jsonError = e.message;
            logger.debug("Failed parsing config as JSON: " + configPath);
            try {
              if (yaml == null) {
                yaml = require("yaml-front-matter");
              }
              externalOptions = yaml.safeLoad(contents);
            } catch (_error) {
              e = _error;
              title = "Atom Beautify failed to parse config as JSON or YAML";
              detail = "Parsing '.jsbeautifyrc' at " + configPath + "\nJSON: " + jsonError + "\nYAML: " + e.message;
              if (typeof atom !== "undefined" && atom !== null) {
                atom.notifications.addWarning(title, {
                  detail: detail,
                  dismissable: true
                });
              }
              logger.debug("Failed parsing config as YAML and JSON: " + configPath);
              externalOptions = {};
            }
          }
        }
      } else {
        externalOptions = {};
      }
      return externalOptions;
    };

    Beautifiers.prototype.getOptionsForPath = function(editedFilePath, editor) {
      var allOptions, configOptions, editorConfigOptions, editorOptions, homeOptions, isNested, isSelection, languageNamespaces, p, pc, pf, projectOptions, softTabs, tabLength, userHome;
      languageNamespaces = this.languages.namespaces;
      editorOptions = {};
      if (editor != null) {
        isSelection = !!editor.getSelectedText();
        softTabs = editor.softTabs;
        tabLength = editor.getTabLength();
        editorOptions = {
          indent_size: (softTabs ? tabLength : 1),
          indent_char: (softTabs ? " " : "\t"),
          indent_with_tabs: !softTabs
        };
      }
      configOptions = this.getConfigOptionsFromSettings(languageNamespaces);
      userHome = this.getUserHome();
      homeOptions = this.getConfig(path.join(userHome, "FAKEFILENAME"), false);
      if (editedFilePath != null) {
        if (editorconfig == null) {
          editorconfig = require('editorconfig');
        }
        editorConfigOptions = editorconfig.parse(editedFilePath).then(function(editorConfigOptions) {
          logger.verbose('editorConfigOptions', editorConfigOptions);
          if (editorConfigOptions.indent_style === 'space') {
            editorConfigOptions.indent_char = " ";
          } else if (editorConfigOptions.indent_style === 'tab') {
            editorConfigOptions.indent_char = "\t";
            editorConfigOptions.indent_with_tabs = true;
            if (editorConfigOptions.tab_width) {
              editorConfigOptions.indent_size = editorConfigOptions.tab_width;
            }
          }
          return {
            _default: editorConfigOptions
          };
        });
        projectOptions = [];
        p = path.dirname(editedFilePath);
        while (p !== path.resolve(p, "../")) {
          pf = path.join(p, "FAKEFILENAME");
          pc = this.getConfig(pf, false);
          isNested = this.isNestedOptions(pc);
          if (!isNested) {
            pc = {
              _default: pc
            };
          }
          projectOptions.push(pc);
          p = path.resolve(p, "../");
        }
      } else {
        editorConfigOptions = {};
        projectOptions = [];
      }
      allOptions = [
        {
          _default: editorOptions
        }, configOptions, {
          _default: homeOptions
        }, editorConfigOptions
      ];
      projectOptions.reverse();
      allOptions = allOptions.concat(projectOptions);
      return allOptions;
    };

    Beautifiers.prototype.isNestedOptions = function(currOptions) {
      var containsNested, key;
      containsNested = false;
      key = void 0;
      if (currOptions._default) {
        return true;
      }
      for (key in currOptions) {
        if (_.indexOf(this.languages.namespaces, key) >= 0 && typeof currOptions[key] === "object") {
          containsNested = true;
          break;
        }
      }
      return containsNested;
    };

    Beautifiers.prototype.getOptions = function(selections, allOptions) {
      var options, self;
      self = this;
      if (_ == null) {
        _ = require("lodash");
      }
      if (extend == null) {
        extend = require("extend");
      }
      logger.verbose('getOptions selections', selections, allOptions);
      options = _.reduce(allOptions, (function(_this) {
        return function(result, currOptions) {
          var collectedConfig, containsNested, selection, _i, _len;
          collectedConfig = currOptions._default || {};
          containsNested = _this.isNestedOptions(currOptions);
          logger.verbose(containsNested, currOptions);
          if (!containsNested) {
            currOptions = {
              _default: currOptions
            };
          }
          for (_i = 0, _len = selections.length; _i < _len; _i++) {
            selection = selections[_i];
            logger.verbose('options', selection, currOptions[selection]);
            _.merge(collectedConfig, currOptions[selection]);
            logger.verbose('options', selection, collectedConfig);
          }
          return extend(result, collectedConfig);
        };
      })(this), {});
      return options;
    };

    return Beautifiers;

  })(EventEmitter);

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/tane/.atom/packages/atom-beautify/src/beautifiers/index.coffee
